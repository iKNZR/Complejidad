{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "from pygame.locals import *\n",
    "from sys import exit\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Barra(pygame.sprite.Sprite): #se crea una función barra\n",
    "   def __init__(self, width, height,cuadro,columna):\n",
    "      pygame.sprite.Sprite.__init__(self)\n",
    "      self.image = pygame.Surface((width,height)).convert()     #propiedades de imagen de la barra\n",
    "      self.image.fill((0,0,0))\n",
    "      self.rect = self.image.get_rect()\n",
    "      self.columna = columna\n",
    "      self.cuadro = cuadro\n",
    "   def update(self,mouse): #se define la actualización de los eventos \n",
    "       #análisis de eventos de click\n",
    "      if num_barra_clicked == 0: #barra no colocada\n",
    "         if self.rect.collidepoint(mouse): \n",
    "            self.image.fill((255,0,0))\n",
    "            if self.rect.width > self.rect.height:\n",
    "               hor_redbarra_list.add(self)\n",
    "            elif self.rect.height > self.rect.width:\n",
    "               vert_redbarra_list.add(self)\n",
    "      elif num_barra_clicked == 1:  #se especifica la aparición de una barra cuando se haga click en un determinado punto\n",
    "         if self.rect.collidepoint(mouse) and self.rect.width > self.rect.height:\n",
    "            for barra in hor_redbarra_list: #en caso de haberse hecho click en un espacio \"vacío\" este se tornará de color rojo y adquiere otra propiedad\n",
    "               if barra.cuadro == self.cuadro and abs(barra.columna - self.columna) == 1:\n",
    "                  self.image.fill((255,0,0))\n",
    "         elif self.rect.collidepoint(mouse) and self.rect.width < self.rect.height:\n",
    "            for barra in vert_redbarra_list:\n",
    "               if barra.columna == self.columna and abs(barra.cuadro - self.columna) == 1:\n",
    "                  self.image.fill((255,0,0))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Player(pygame.sprite.Sprite): #creación de la función jugador o player\n",
    "   def __init__(self,image,cuadro,columna):\n",
    "      pygame.sprite.Sprite.__init__(self)   #uso de la funcion \"self\" para especificar que el uso de las funciones está sobre el objeto Player\n",
    "      self.image = pygame.image.load(image) #carga de sprites del jugador\n",
    "      self.rect = self.image.get_rect()\n",
    "      self.columna = columna\n",
    "      self.cuadro = cuadro\n",
    "      self.update_position() \n",
    "   def update_position(self): #actualización de la posición en que se encuentre la pieza\n",
    "      self.rect.y = self.cuadro*50 + 20\n",
    "      self.rect.x = self.columna*50 + 23\n",
    " \n",
    "   def update(self,mouse): #actualización de los eventos del mouse\n",
    "      move_blocked = 0\n",
    "      if self.rect.collidepoint(mouse):\n",
    "          #eventos de movimiento de las piezas manteniendo click sobre la pieza\n",
    "         if event.key == K_RIGHT:  #derecha\n",
    "            for barra in vert_redbarra_list:\n",
    "               if barra.cuadro == self.cuadro and barra.columna == self.columna:\n",
    "                  move_blocked = 1\n",
    "            if move_blocked == 0: self.columna += 1\n",
    "            if self.columna >= 8: self.columna = 8\n",
    "         elif event.key == K_UP: #arriba\n",
    "            for barra in hor_redbarra_list:\n",
    "               if barra.cuadro == self.cuadro - 1 and barra.columna == self.columna:\n",
    "                  move_blocked = 1\n",
    "            if move_blocked == 0: self.cuadro -= 1\n",
    "            if self.cuadro < 0: self.cuadro = 0\n",
    "         elif event.key == K_DOWN: #abajo\n",
    "            for barra in hor_redbarra_list:\n",
    "               if barra.cuadro == self.cuadro and barra.columna == self.columna:\n",
    "                  move_blocked = 1\n",
    "            if move_blocked == 0: self.cuadro += 1\n",
    "            if self.cuadro >= 8: self.cuadro = 8\n",
    "         elif event.key == K_LEFT: #izquierda\n",
    "            for barra in vert_redbarra_list:\n",
    "               if barra.cuadro == self.cuadro and barra.columna == self.columna - 1:\n",
    "                  move_blocked = 1\n",
    "            if move_blocked == 0: self.columna -= 1\n",
    "            if self.columna <= 0: self.rect.x = 0\n",
    "      self.update_position()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pygame.init() #Se inicia el juego apoyado de la librería pygame\n",
    "screen = pygame.display.set_mode([470,470]) #Se define el tamaño de la ventana\n",
    "pygame.display.set_caption(\"Trabajo Parcial\") #Se especifica el nombre de la ventana\n",
    "back = pygame.Surface((470,470)) #Se pinta la superficie\n",
    "background = back.convert()\n",
    "background.fill((255,255,255)) #Se rellena la superficie de color blanco = (255, 255, 255)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#se llama a los componentes\n",
    "barra_list = pygame.sprite.Group()\n",
    "hor_barra_list = pygame.sprite.Group() #barra horizontal sin pintar\n",
    "vert_barra_list = pygame.sprite.Group() #barra vertical sin pintar\n",
    "hor_redbarra_list = pygame.sprite.Group() #barra horizontal pintada\n",
    "vert_redbarra_list = pygame.sprite.Group() #barra vertical pintada\n",
    "player1_group = pygame.sprite.Group()   #Primer player o jugador \n",
    "player2_group = pygame.sprite.Group()   #Segundo jugador\n",
    "player_list = pygame.sprite.Group() \n",
    "all_sprites_list = pygame.sprite.Group() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#se especifican las coordenadas para la barra en x e y\n",
    "barra_coord_x = [60,110,160,210,260,310,360,410] \n",
    "barra_coord = barra_coord_x\n",
    "barra_coord_y = [10,60,110,160,210,260,310,360,410]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creación de la cuadrícula especificando dejar los espacios vacíos para los cuadros del tablero\n",
    "for cuadro in range(0,9):\n",
    "   for columna in range(0,8):\n",
    "      barra_vert = Barra(5, 50, cuadro, columna)\n",
    "      barra_vert.rect.x = barra_coord_x[columna]\n",
    "      barra_vert.rect.y = barra_coord_y[cuadro]\n",
    "      vert_barra_list.add(barra_vert)\n",
    "      barra_list.add(barra_vert)\n",
    "      all_sprites_list.add(barra_vert)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for cuadro in range(0,8):\n",
    "   for columna in range(0,9):\n",
    "      barra_hor = Barra(50,5, cuadro, columna)\n",
    "      barra_hor.rect.x = barra_coord_y[columna]\n",
    "      barra_hor.rect.y = barra_coord_x[cuadro]\n",
    "      hor_barra_list.add(barra_hor)\n",
    "      barra_list.add(barra_hor)\n",
    "      all_sprites_list.add(barra_hor)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importación de los datos del jugador 1, sprite, grupo\n",
    "player1 = Player('piece1.png',0,4)\n",
    "player1_group.add(player1)\n",
    "player_list.add(player1)\n",
    "all_sprites_list.add(player1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importación de los datos del jugador 2, sprite, grupo\n",
    "player2 = Player('piece2.png',8,4)\n",
    "player2_group.add(player2)\n",
    "player_list.add(player2)\n",
    "all_sprites_list.add(player2) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_barra_clicked= 0 #se inicia con 0 barras pintadas de rojo\n",
    "p1_turn = 1 #el turno inicia con el jugador 1 ubicado en la parte inferior de la pantalla\n",
    "num_moves = 0 #movimientos en 0 al inicio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#creación de un ciclo while en que estará ejecutándose el juego\n",
    "while 1:\n",
    "   mouse = pygame.mouse.get_pos()\n",
    "   for event in pygame.event.get():\n",
    "      if event.type == QUIT:\n",
    "         exit()\n",
    "      if event.type == pygame.MOUSEBUTTONDOWN:\n",
    "         barra_list.update(mouse)\n",
    "         if num_barra_clicked == 0: \n",
    "            num_moves +=1\n",
    "            num_barra_clicked = 1\n",
    "         else: num_barra_clicked = 0\n",
    "      if event.type == pygame.KEYDOWN:\n",
    "         if p1_turn == 1:\n",
    "            player1_group.update(mouse)\n",
    "            p1_turn = 0\n",
    "            num_moves += 1 \n",
    "         elif p1_turn == 0:\n",
    "            player2_group.update(mouse)\n",
    "            p1_turn = 1\n",
    "            num_moves += 1\n",
    "               screen.blit(background,(0,0))\n",
    "   pygame.draw.rect(screen,(0,0,0),Rect((10,10),(450,450)),5)\n",
    "   all_sprites_list.draw(screen)\n",
    "   pygame.display.update()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
